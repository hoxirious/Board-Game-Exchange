{
  "openapi": "3.0.0",
  "info": {
    "version": "v1.0.0",
    "title": "BGE Swagger Docs",
    "description": "BGE Backend Routes"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": ""
    }
  ],
  "paths": {
    "/boardGames/": {
      "get": {
        "tags": [
          "BoardGames"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "Successfully got a list of board games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGameList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGameList"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get a list of board games",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board games could not be found"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board games could not be found"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boardGames/{id}": {
      "get": {
        "tags": [
          "BoardGames"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got a board game by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGame"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGame"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get board game by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board game with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board game with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boardGames/titles/{title}": {
      "get": {
        "tags": [
          "BoardGames"
        ],
        "description": "",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got a board game by title",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGame"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGame"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get board game by title",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board game with title does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board game with title does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boardGames/categories/{category}": {
      "get": {
        "tags": [
          "BoardGames"
        ],
        "description": "",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got a list of board games by category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGameList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BoardGameList"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get a list of board games by category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board game with category does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Board game with category does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/": {
      "get": {
        "tags": [
          "Posts"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "Successfully got list of posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostList"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get list of posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Posts could not be found"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Posts could not be found"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "description": "",
        "responses": {
          "201": {
            "description": "Successfully created a new post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed to create new post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new post"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new post"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to create a new post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new post"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new post"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          }
        }
      }
    },
    "/posts/search": {
      "get": {
        "tags": [
          "Posts"
        ],
        "description": "",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "condition",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got list of posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostList"
                }
              }
            }
          },
          "400": {
            "description": "Failed to get list of posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Posts could not be found"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Posts could not be found"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got post by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get post by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Posts for id do not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Posts for id do not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Posts"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated a post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "304": {
            "description": "Failed to update a post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Post with id not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Post with id not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to update a post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Post with id not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Post with id not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "The request body for the update does not need all fields to update the Post",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Posts"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully deleted a post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed to delete a post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to remove post with id"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to remove post with id"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed to delete a post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Post with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Post with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/messages/{userId}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got list of messages for user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageList"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get list of messages for user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Messages for userID do not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Messages for userID do not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/messages/": {
      "post": {
        "tags": [
          "Messages"
        ],
        "description": "",
        "responses": {
          "201": {
            "description": "Successfully created a message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed to create a new message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new message"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new message"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to create a new message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new message"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new message"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got a specific user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get a specific user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "304": {
            "description": "Failed to update a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id: id not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id: id not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to update a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User already exists with same username or email"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User already exists with same username or email"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "The request body for the update does not need all fields to update the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully deleted a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed to delete a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to remove user with id"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to remove user with id"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed to delete a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/get/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got a specific user by email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get a specific user by email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with id does not exist"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "",
        "responses": {
          "201": {
            "description": "Successfully created a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed to create a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User already exists with same username or email"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User already exists with same username or email"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to create a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new user"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Failed to create a new user"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        }
      }
    },
    "/users/update/{email}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated a user by email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "304": {
            "description": "Failed to update a user by email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with email: not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with email: not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to update a user by email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with email: not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User with email: not updated"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "The request body for the update does not need all fields to update the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "UserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "660df3819689aaa534db83b0"
          },
          "username": {
            "type": "string",
            "example": "test_user_1"
          },
          "password": {
            "type": "string",
            "example": "test_password_1"
          },
          "email": {
            "type": "string",
            "example": "test_user1@mail.com"
          },
          "dateCreated": {
            "type": "string",
            "example": "2024-04-04T00:25:37.920Z"
          },
          "location": {
            "type": "string",
            "example": ""
          },
          "fullName": {
            "type": "string",
            "example": "Test User"
          },
          "profilePictureUrl": {
            "type": "string",
            "example": ""
          },
          "isAdmin": {
            "type": "boolean",
            "example": false
          }
        },
        "xml": {
          "name": "UserResponse"
        }
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "test_user_1"
          },
          "password": {
            "type": "string",
            "example": "test_password_1"
          },
          "email": {
            "type": "string",
            "example": "test_user1@mail.com"
          },
          "dateCreated": {
            "type": "string",
            "example": "2024-04-04T00:25:37.920Z"
          },
          "location": {
            "type": "string",
            "example": ""
          },
          "fullName": {
            "type": "string",
            "example": "Test User"
          },
          "profilePictureUrl": {
            "type": "string",
            "example": ""
          },
          "isAdmin": {
            "type": "boolean",
            "example": false
          }
        },
        "xml": {
          "name": "UserRequest"
        }
      },
      "BoardGameList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "660df384427fa6b473db83b1"
            },
            "title": {
              "type": "string",
              "example": "Carcassonne"
            },
            "image": {
              "type": "string",
              "example": "https://cf.geekdo-images.com/original/img/o4p6f88SGE899BTNMzTvERVWZ-M=/0x0/pic2337577.jpg"
            },
            "category": {
              "type": "string",
              "example": "Medieval,City Building,Territory Building"
            }
          }
        },
        "xml": {
          "name": "BoardGameList"
        }
      },
      "BoardGame": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "660df384427fa6b473db83b0"
          },
          "title": {
            "type": "string",
            "example": "Catan"
          },
          "image": {
            "type": "string",
            "example": "https://cf.geekdo-images.com/original/img/A-0yDJkve0avEicYQ4HoNO-HkK8=/0x0/pic2419375.jpg"
          },
          "category": {
            "type": "string",
            "example": "Economic,Negotiation"
          }
        },
        "xml": {
          "name": "BoardGame"
        }
      },
      "MessageList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "660df3829689aaa534db83b2 (postId)": {
              "type": "object",
              "properties": {
                "660df3819689aaa534db83b0 (otherUserId)": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "660df3829689aaa534db83c2"
                      },
                      "timestamp": {
                        "type": "string",
                        "example": "2024-04-04T00:25:38.138Z"
                      },
                      "text": {
                        "type": "string",
                        "example": "first: message 4"
                      },
                      "postId": {
                        "type": "string",
                        "example": "660df3829689aaa534db83b2"
                      },
                      "senderUserID": {
                        "type": "string",
                        "example": "660df3819689aaa534db83b1"
                      },
                      "receiverUserID": {
                        "type": "string",
                        "example": "660df3819689aaa534db83b0"
                      },
                      "hasReceiverSeen": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "xml": {
          "name": "MessageList"
        }
      },
      "MessageRequest": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "example": "2024-03-25T04:28:28.009Z"
          },
          "text": {
            "type": "string",
            "example": "test message"
          },
          "postId": {
            "type": "string",
            "example": "6600fd6c99144c503fdb83b2"
          },
          "senderUserID": {
            "type": "string",
            "example": "6600fd6b99144c503fdb83b0"
          },
          "receiverUserID": {
            "type": "string",
            "example": "6600fd6b99144c503fdb83b1"
          },
          "senderStatus": {
            "type": "string",
            "example": "SUCCESS"
          },
          "hasReceiverSeen": {
            "type": "boolean",
            "example": false
          }
        },
        "xml": {
          "name": "MessageRequest"
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "660df8b745f5390790750853"
          },
          "timestamp": {
            "type": "string",
            "example": "2024-03-25T04:28:28.009Z"
          },
          "text": {
            "type": "string",
            "example": "test message"
          },
          "postId": {
            "type": "string",
            "example": "6600fd6c99144c503fdb83b2"
          },
          "senderUserID": {
            "type": "string",
            "example": "6600fd6b99144c503fdb83b0"
          },
          "receiverUserID": {
            "type": "string",
            "example": "6600fd6b99144c503fdb83b1"
          },
          "senderStatus": {
            "type": "string",
            "example": "SUCCESS"
          },
          "hasReceiverSeen": {
            "type": "boolean",
            "example": false
          }
        },
        "xml": {
          "name": "MessageResponse"
        }
      },
      "PostList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "660df3829689aaa534db83b3"
            },
            "postsPictureUrl": {
              "type": "array",
              "example": [
                "https://cf.geekdo-images.com/original/img/A-0yDJkve0avEicYQ4HoNO-HkK8=/0x0/pic2419375.jpg"
              ],
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string",
              "example": "BoardGame2"
            },
            "description": {
              "type": "string",
              "example": "This is a test description"
            },
            "location": {
              "type": "string",
              "example": "Test Location"
            },
            "condition": {
              "type": "string",
              "example": "Used - Like New"
            },
            "category": {
              "type": "string",
              "example": "Card Game"
            },
            "ownerUserID": {
              "type": "string",
              "example": "660df3819689aaa534db83b0"
            },
            "dateCreated": {
              "type": "string",
              "example": "2024-04-04T00:25:38.127Z"
            }
          }
        },
        "xml": {
          "name": "PostList"
        }
      },
      "PostRequest": {
        "type": "object",
        "properties": {
          "postsPictureUrl": {
            "type": "array",
            "example": [
              "https://cf.geekdo-images.com/original/img/A-0yDJkve0avEicYQ4HoNO-HkK8=/0x0/pic2419375.jpg"
            ],
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "example": "BoardGame2"
          },
          "description": {
            "type": "string",
            "example": "This is a test description"
          },
          "location": {
            "type": "string",
            "example": "Test Location"
          },
          "condition": {
            "type": "string",
            "example": "Used - Like New"
          },
          "category": {
            "type": "string",
            "example": "Card Game"
          },
          "ownerUserID": {
            "type": "string",
            "example": "660df3819689aaa534db83b0"
          },
          "dateCreated": {
            "type": "string",
            "example": "2024-04-04T00:25:38.127Z"
          }
        },
        "xml": {
          "name": "PostRequest"
        }
      },
      "PostResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "660df3829689aaa534db83b3"
          },
          "postsPictureUrl": {
            "type": "array",
            "example": [
              "https://cf.geekdo-images.com/original/img/A-0yDJkve0avEicYQ4HoNO-HkK8=/0x0/pic2419375.jpg"
            ],
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "example": "BoardGame2"
          },
          "description": {
            "type": "string",
            "example": "This is a test description"
          },
          "location": {
            "type": "string",
            "example": "Test Location"
          },
          "condition": {
            "type": "string",
            "example": "Used - Like New"
          },
          "category": {
            "type": "string",
            "example": "Card Game"
          },
          "ownerUserID": {
            "type": "string",
            "example": "660df3819689aaa534db83b0"
          },
          "dateCreated": {
            "type": "string",
            "example": "2024-04-04T00:25:38.127Z"
          }
        },
        "xml": {
          "name": "PostResponse"
        }
      }
    }
  }
}